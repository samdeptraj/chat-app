{"version":3,"file":"profanity-check.cjs.production.min.js","sources":["../src/data/dictionary.ts","../src/Filter.ts"],"sourcesContent":["import Arabic from './arabic.json';\nimport Chinese from './chinese.json';\nimport Czech from './czech.json';\nimport Danish from './danish.json';\nimport Esperanto from './esperanto.json';\nimport English from './english.json';\nimport Finnish from './finnish.json';\nimport German from './german.json';\nimport Hindi from './hindi.json';\nimport Hungarian from './hungarian.json';\nimport Korean from './korean.json';\nimport Norwegian from './Norwegian.json';\nimport Persian from './persian.json';\nimport Polish from './polish.json';\nimport Portuguese from './portuguese.json';\nimport Russian from './russian.json';\nimport French from './french.json';\nimport Italian from './italian.json';\nimport Japanese from './japanese.json';\nimport Turkish from './turkish.json';\nimport Swedish from './swedish.json';\nimport Thai from './thai.json';\nexport default {\n  arabic: Arabic.words,\n  chinese: Chinese.words,\n  czech: Czech.words,\n  danish: Danish.words,\n  english: English.words,\n  esperanto: Esperanto.words,\n  finnish: Finnish.words,\n  french: French.words,\n  german: German.words,\n  hindi: Hindi.words,\n  hungarian: Hungarian.words,\n  italian: Italian.words,\n  japanese: Japanese.words,\n  korean: Korean.words,\n  norwegian: Norwegian.words,\n  persian: Persian.words,\n  polish: Polish.words,\n  portuguese: Portuguese.words,\n  russian: Russian.words,\n  turkish: Turkish.words,\n  swedish: Swedish.words,\n  thai: Thai.words,\n};\n","import dictionary from './data/dictionary';\n\ntype language =\n  | 'arabic'\n  | 'chinese'\n  | 'czech'\n  | 'danish'\n  | 'english'\n  | 'esperanto'\n  | 'finnish'\n  | 'french'\n  | 'german'\n  | 'hindi'\n  | 'hungarian'\n  | 'italian'\n  | 'japanese'\n  | 'korean'\n  | 'norwegian'\n  | 'persian'\n  | 'polish'\n  | 'portuguese'\n  | 'russian'\n  | 'turkish'\n  | 'swedish'\n  | 'thai';\nexport default class Filter {\n  private words: Set<string>;\n  /**\n   *\n   */\n  constructor(config?: { languages: language[] }) {\n    let words = dictionary.english;\n\n    if (config) {\n      const languagesChecks = new Set<language>(config?.languages);\n      if (languagesChecks.size !== 0) {\n        languagesChecks.forEach(lang => {\n          words = [...words, ...dictionary[lang]];\n        });\n      }\n    }\n    this.words = new Set<string>(words);\n  }\n\n  /**\n   *\n   * @param value\n   * @returns\n   */\n  isProfane(value: string): boolean {\n    for (const word of this.words) {\n      const wordExp = new RegExp(`${word.replace(/(\\W)/g, '\\\\$1')}`, 'gi');\n      if (wordExp.test(value)) return true;\n    }\n    return false;\n  }\n}\n"],"names":["arabic","chinese","czech","danish","english","esperanto","finnish","french","german","hindi","hungarian","italian","japanese","korean","norwegian","persian","polish","portuguese","russian","turkish","swedish","thai","config","words","dictionary","languagesChecks","Set","languages","size","forEach","lang","this","isProfane","value","RegExp","replace","test"],"mappings":"oLAsBe,CACbA,wjCACAC,ymDACAC,iXACAC,gMACAC,wuIACAC,oWACAC,46CACAC,u+BACAC,qpBACAC,8iCACAC,k7BACAC,26DACAC,0yCACAC,6YACAC,4IACAC,iWACAC,siBACAC,owBACAC,6zDACAC,4yEACAC,uZACAC,yRCdA,WAAYC,GACV,IAAIC,EAAQC,EAAWpB,QAEvB,GAAIkB,EAAQ,CACV,IAAMG,EAAkB,IAAIC,UAAcJ,SAAAA,EAAQK,WACrB,IAAzBF,EAAgBG,MAClBH,EAAgBI,SAAQ,SAAAC,GACtBP,YAAYA,EAAUC,EAAWM,OAIvCC,KAAKR,MAAQ,IAAIG,IAAYH,sBAQ/BS,UAAA,SAAUC,GACR,gsBAAmBF,KAAKR,sBAEtB,GADgB,IAAIW,kBAAeC,QAAQ,QAAS,QAAW,MACnDC,KAAKH,GAAQ,OAAO,EAElC,OAAO"}